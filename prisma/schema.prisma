// Prisma schema for Next-Map application
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  location      String?
  website       String?
  theme         String    @default("light")
  language      String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  maps     Map[]
  favorites MapFavorite[]
  reviews   MapReview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Map {
  id          String   @id @default(cuid())
  title       String
  description String?
  latitude    Float
  longitude   Float
  zoom        Float    @default(10)
  bearing     Float    @default(0)
  pitch       Float    @default(0)
  style       String   @default("maplibre://demotiles/style.json")
  is3D        Boolean  @default(false)
  isVREnabled Boolean  @default(false)
  isPublic    Boolean  @default(true)
  tags        String[]
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId  String
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  favorites MapFavorite[]
  reviews   MapReview[]
  layers    MapLayer[]
  
  @@index([authorId])
  @@index([isPublic])
  @@index([createdAt])
}

model MapLayer {
  id        String @id @default(cuid())
  mapId     String
  layerId   String
  type      String // "fill", "line", "symbol", "circle", "fill-extrusion", etc.
  source    Json
  paint     Json?
  layout    Json?
  filter    Json?
  minzoom   Float?
  maxzoom   Float?
  order     Int    @default(0)
  visible   Boolean @default(true)
  
  map Map @relation(fields: [mapId], references: [id], onDelete: Cascade)
  
  @@index([mapId])
  @@index([order])
}

model MapFavorite {
  id     String @id @default(cuid())
  userId String
  mapId  String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  map  Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mapId])
}

model MapReview {
  id      String @id @default(cuid())
  userId  String
  mapId   String
  rating  Int    @db.SmallInt // 1-5 stars
  comment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  map  Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mapId])
  @@index([mapId])
  @@index([rating])
}