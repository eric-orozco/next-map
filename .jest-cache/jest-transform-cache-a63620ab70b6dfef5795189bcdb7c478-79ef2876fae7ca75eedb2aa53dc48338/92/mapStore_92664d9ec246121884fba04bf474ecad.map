{"version":3,"names":["cov_1epi0gwngg","actualCoverage","s","useMapStore","DEFAULT_VIEW_STATE","longitude","latitude","zoom","bearing","pitch","_zustand","create","set","get","f","mapInstance","setMapInstance","map","viewState","setViewState","newViewState","state","mapStyle","setMapStyle","style","is3DEnabled","setIs3DEnabled","enabled","isVREnabled","setIsVREnabled","layers","addLayer","layer","removeLayer","layerId","filter","l","id","updateLayer","updates","b","toggleLayerVisibility","visible","markers","addMarker","marker","removeMarker","markerId","m","updateMarker","isInteractive","setIsInteractive","interactive","selectedFeature","setSelectedFeature","feature","isMapLoading","setIsMapLoading","loading","mapError","setMapError","error","showControls","navigation","geolocate","scale","fullscreen","updateControlsVisibility","controls","searchResults","setSearchResults","results","flyTo","location","center","essential","fitBounds","bounds","padding","resetView"],"sources":["/Users/seaofchaos/Projects/next-map/src/stores/mapStore.ts"],"sourcesContent":["import { create } from 'zustand'\nimport { Map as MapLibreMap } from 'maplibre-gl'\nimport type { \n  MapViewState, \n  MapLayer, \n  MapMarker, \n  SearchResult, \n  MapFeature \n} from '@/types'\n\ninterface MapState {\n  // Map Instance\n  mapInstance: MapLibreMap | null\n  setMapInstance: (map: MapLibreMap | null) => void\n  \n  // View State\n  viewState: MapViewState\n  setViewState: (viewState: Partial<MapViewState>) => void\n  \n  // Map Style\n  mapStyle: string\n  setMapStyle: (style: string) => void\n  \n  // 3D/VR Mode\n  is3DEnabled: boolean\n  setIs3DEnabled: (enabled: boolean) => void\n  isVREnabled: boolean\n  setIsVREnabled: (enabled: boolean) => void\n  \n  // Layers\n  layers: MapLayer[]\n  addLayer: (layer: MapLayer) => void\n  removeLayer: (layerId: string) => void\n  updateLayer: (layerId: string, updates: Partial<MapLayer>) => void\n  toggleLayerVisibility: (layerId: string) => void\n  \n  // Markers\n  markers: MapMarker[]\n  addMarker: (marker: MapMarker) => void\n  removeMarker: (markerId: string) => void\n  updateMarker: (markerId: string, updates: Partial<MapMarker>) => void\n  \n  // Interaction\n  isInteractive: boolean\n  setIsInteractive: (interactive: boolean) => void\n  selectedFeature: MapFeature | null\n  setSelectedFeature: (feature: MapFeature | null) => void\n  \n  // Loading/Error States\n  isMapLoading: boolean\n  setIsMapLoading: (loading: boolean) => void\n  mapError: string | null\n  setMapError: (error: string | null) => void\n  \n  // Controls\n  showControls: {\n    navigation: boolean\n    geolocate: boolean\n    scale: boolean\n    fullscreen: boolean\n  }\n  updateControlsVisibility: (controls: Partial<MapState['showControls']>) => void\n  \n  // Search\n  searchResults: SearchResult[]\n  setSearchResults: (results: SearchResult[]) => void\n  \n  // Utilities\n  flyTo: (location: { longitude: number, latitude: number, zoom?: number }) => void\n  fitBounds: (bounds: [[number, number], [number, number]]) => void\n  resetView: () => void\n}\n\nconst DEFAULT_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 10,\n  bearing: 0,\n  pitch: 0,\n}\n\nexport const useMapStore = create<MapState>((set, get) => ({\n  // Map Instance\n  mapInstance: null,\n  setMapInstance: (map) => set({ mapInstance: map }),\n  \n  // View State\n  viewState: DEFAULT_VIEW_STATE,\n  setViewState: (newViewState) => \n    set((state) => ({ \n      viewState: { ...state.viewState, ...newViewState } \n    })),\n  \n  // Map Style\n  mapStyle: 'https://demotiles.maplibre.org/style.json',\n  setMapStyle: (style) => set({ mapStyle: style }),\n  \n  // 3D/VR Mode\n  is3DEnabled: false,\n  setIs3DEnabled: (enabled) => set({ is3DEnabled: enabled }),\n  isVREnabled: false,\n  setIsVREnabled: (enabled) => set({ isVREnabled: enabled }),\n  \n  // Layers\n  layers: [],\n  addLayer: (layer) => \n    set((state) => ({ \n      layers: [...state.layers, layer] \n    })),\n  removeLayer: (layerId) => \n    set((state) => ({ \n      layers: state.layers.filter(l => l.id !== layerId) \n    })),\n  updateLayer: (layerId, updates) => \n    set((state) => ({\n      layers: state.layers.map(l => \n        l.id === layerId ? { ...l, ...updates } : l\n      )\n    })),\n  toggleLayerVisibility: (layerId) => \n    set((state) => ({\n      layers: state.layers.map(l => \n        l.id === layerId ? { ...l, visible: !l.visible } : l\n      )\n    })),\n  \n  // Markers\n  markers: [],\n  addMarker: (marker) => \n    set((state) => ({ \n      markers: [...state.markers, marker] \n    })),\n  removeMarker: (markerId) => \n    set((state) => ({ \n      markers: state.markers.filter(m => m.id !== markerId) \n    })),\n  updateMarker: (markerId, updates) => \n    set((state) => ({\n      markers: state.markers.map(m => \n        m.id === markerId ? { ...m, ...updates } : m\n      )\n    })),\n  \n  // Interaction\n  isInteractive: true,\n  setIsInteractive: (interactive) => set({ isInteractive: interactive }),\n  selectedFeature: null,\n  setSelectedFeature: (feature) => set({ selectedFeature: feature }),\n  \n  // Loading/Error States\n  isMapLoading: false,\n  setIsMapLoading: (loading) => set({ isMapLoading: loading }),\n  mapError: null,\n  setMapError: (error) => set({ mapError: error }),\n  \n  // Controls\n  showControls: {\n    navigation: true,\n    geolocate: true,\n    scale: true,\n    fullscreen: true,\n  },\n  updateControlsVisibility: (controls) => \n    set((state) => ({\n      showControls: { ...state.showControls, ...controls }\n    })),\n  \n  // Search\n  searchResults: [],\n  setSearchResults: (results) => set({ searchResults: results }),\n  \n  // Utilities\n  flyTo: (location) => {\n    const { mapInstance } = get()\n    if (mapInstance) {\n      mapInstance.flyTo({\n        center: [location.longitude, location.latitude],\n        zoom: location.zoom || 14,\n        essential: true,\n      })\n    }\n    set((state) => ({\n      viewState: {\n        ...state.viewState,\n        longitude: location.longitude,\n        latitude: location.latitude,\n        zoom: location.zoom || state.viewState.zoom,\n      }\n    }))\n  },\n  \n  fitBounds: (bounds) => {\n    const { mapInstance } = get()\n    if (mapInstance) {\n      mapInstance.fitBounds(bounds, { padding: 50 })\n    }\n  },\n  \n  resetView: () => {\n    set({ viewState: DEFAULT_VIEW_STATE })\n    const { mapInstance } = get()\n    if (mapInstance) {\n      mapInstance.flyTo({\n        center: [DEFAULT_VIEW_STATE.longitude, DEFAULT_VIEW_STATE.latitude],\n        zoom: DEFAULT_VIEW_STATE.zoom,\n        bearing: DEFAULT_VIEW_STATE.bearing,\n        pitch: DEFAULT_VIEW_STATE.pitch,\n        essential: true,\n      })\n    }\n  },\n}))"],"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","ignoreList":[]}