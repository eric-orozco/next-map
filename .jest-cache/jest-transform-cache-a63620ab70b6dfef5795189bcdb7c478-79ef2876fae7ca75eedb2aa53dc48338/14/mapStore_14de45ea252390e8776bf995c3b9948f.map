{"version":3,"names":["cov_1epi0gwngg","actualCoverage","s","useMapStore","DEFAULT_VIEW_STATE","longitude","latitude","zoom","bearing","pitch","_zustand","create","set","get","f","mapInstance","setMapInstance","map","viewState","setViewState","newViewState","state","mapStyle","version","sources","type","tiles","tileSize","attribution","layers","id","source","setMapStyle","style","is3DEnabled","setIs3DEnabled","enabled","isVREnabled","setIsVREnabled","addLayer","layer","removeLayer","layerId","filter","l","updateLayer","updates","b","toggleLayerVisibility","visible","markers","addMarker","marker","removeMarker","markerId","m","updateMarker","isInteractive","setIsInteractive","interactive","selectedFeature","setSelectedFeature","feature","isMapLoading","setIsMapLoading","loading","mapError","setMapError","error","showControls","navigation","geolocate","scale","fullscreen","updateControlsVisibility","controls","searchResults","setSearchResults","results","flyTo","location","center","essential","fitBounds","bounds","padding","resetView"],"sources":["/Users/seaofchaos/Projects/next-map/src/stores/mapStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Map as MapLibreMap, type StyleSpecification } from 'maplibre-gl';\nimport type {\n  MapViewState,\n  MapLayer,\n  MapMarker,\n  SearchResult,\n  MapFeature,\n} from '@/types';\n\ninterface MapState {\n  // Map Instance\n  mapInstance: MapLibreMap | null;\n  setMapInstance: (map: MapLibreMap | null) => void;\n\n  // View State\n  viewState: MapViewState;\n  setViewState: (viewState: Partial<MapViewState>) => void;\n\n  // Map Style\n  mapStyle: string | StyleSpecification;\n  setMapStyle: (style: string | StyleSpecification) => void;\n\n  // 3D/VR Mode\n  is3DEnabled: boolean;\n  setIs3DEnabled: (enabled: boolean) => void;\n  isVREnabled: boolean;\n  setIsVREnabled: (enabled: boolean) => void;\n\n  // Layers\n  layers: MapLayer[];\n  addLayer: (layer: MapLayer) => void;\n  removeLayer: (layerId: string) => void;\n  updateLayer: (layerId: string, updates: Partial<MapLayer>) => void;\n  toggleLayerVisibility: (layerId: string) => void;\n\n  // Markers\n  markers: MapMarker[];\n  addMarker: (marker: MapMarker) => void;\n  removeMarker: (markerId: string) => void;\n  updateMarker: (markerId: string, updates: Partial<MapMarker>) => void;\n\n  // Interaction\n  isInteractive: boolean;\n  setIsInteractive: (interactive: boolean) => void;\n  selectedFeature: MapFeature | null;\n  setSelectedFeature: (feature: MapFeature | null) => void;\n\n  // Loading/Error States\n  isMapLoading: boolean;\n  setIsMapLoading: (loading: boolean) => void;\n  mapError: string | null;\n  setMapError: (error: string | null) => void;\n\n  // Controls\n  showControls: {\n    navigation: boolean;\n    geolocate: boolean;\n    scale: boolean;\n    fullscreen: boolean;\n  };\n  updateControlsVisibility: (\n    controls: Partial<MapState['showControls']>\n  ) => void;\n\n  // Search\n  searchResults: SearchResult[];\n  setSearchResults: (results: SearchResult[]) => void;\n\n  // Utilities\n  flyTo: (location: {\n    longitude: number;\n    latitude: number;\n    zoom?: number;\n  }) => void;\n  fitBounds: (bounds: [[number, number], [number, number]]) => void;\n  resetView: () => void;\n}\n\nconst DEFAULT_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 10,\n  bearing: 0,\n  pitch: 0,\n};\n\nexport const useMapStore = create<MapState>((set, get) => ({\n  // Map Instance\n  mapInstance: null,\n  setMapInstance: map => set({ mapInstance: map }),\n\n  // View State\n  viewState: DEFAULT_VIEW_STATE,\n  setViewState: newViewState =>\n    set(state => ({\n      viewState: { ...state.viewState, ...newViewState },\n    })),\n\n  // Map Style\n  mapStyle: {\n    version: 8,\n    sources: {\n      'osm-tiles': {\n        type: 'raster',\n        tiles: [\n          'https://a.tile.openstreetmap.org/{z}/{x}/{y}.png',\n          'https://b.tile.openstreetmap.org/{z}/{x}/{y}.png',\n          'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        ],\n        tileSize: 256,\n        attribution: 'Â© OpenStreetMap contributors',\n      },\n    },\n    layers: [\n      {\n        id: 'osm-tiles',\n        type: 'raster',\n        source: 'osm-tiles',\n      },\n    ],\n  } as StyleSpecification,\n  setMapStyle: style => set({ mapStyle: style }),\n\n  // 3D/VR Mode\n  is3DEnabled: false,\n  setIs3DEnabled: enabled => set({ is3DEnabled: enabled }),\n  isVREnabled: false,\n  setIsVREnabled: enabled => set({ isVREnabled: enabled }),\n\n  // Layers\n  layers: [],\n  addLayer: layer =>\n    set(state => ({\n      layers: [...state.layers, layer],\n    })),\n  removeLayer: layerId =>\n    set(state => ({\n      layers: state.layers.filter(l => l.id !== layerId),\n    })),\n  updateLayer: (layerId, updates) =>\n    set(state => ({\n      layers: state.layers.map(l =>\n        l.id === layerId ? { ...l, ...updates } : l\n      ),\n    })),\n  toggleLayerVisibility: layerId =>\n    set(state => ({\n      layers: state.layers.map(l =>\n        l.id === layerId ? { ...l, visible: !l.visible } : l\n      ),\n    })),\n\n  // Markers\n  markers: [],\n  addMarker: marker =>\n    set(state => ({\n      markers: [...state.markers, marker],\n    })),\n  removeMarker: markerId =>\n    set(state => ({\n      markers: state.markers.filter(m => m.id !== markerId),\n    })),\n  updateMarker: (markerId, updates) =>\n    set(state => ({\n      markers: state.markers.map(m =>\n        m.id === markerId ? { ...m, ...updates } : m\n      ),\n    })),\n\n  // Interaction\n  isInteractive: true,\n  setIsInteractive: interactive => set({ isInteractive: interactive }),\n  selectedFeature: null,\n  setSelectedFeature: feature => set({ selectedFeature: feature }),\n\n  // Loading/Error States\n  isMapLoading: false,\n  setIsMapLoading: loading => set({ isMapLoading: loading }),\n  mapError: null,\n  setMapError: error => set({ mapError: error }),\n\n  // Controls\n  showControls: {\n    navigation: true,\n    geolocate: true,\n    scale: true,\n    fullscreen: true,\n  },\n  updateControlsVisibility: controls =>\n    set(state => ({\n      showControls: { ...state.showControls, ...controls },\n    })),\n\n  // Search\n  searchResults: [],\n  setSearchResults: results => set({ searchResults: results }),\n\n  // Utilities\n  flyTo: location => {\n    const { mapInstance } = get();\n    if (mapInstance) {\n      mapInstance.flyTo({\n        center: [location.longitude, location.latitude],\n        zoom: location.zoom || 14,\n        essential: true,\n      });\n    }\n    set(state => ({\n      viewState: {\n        ...state.viewState,\n        longitude: location.longitude,\n        latitude: location.latitude,\n        zoom: location.zoom || state.viewState.zoom,\n      },\n    }));\n  },\n\n  fitBounds: bounds => {\n    const { mapInstance } = get();\n    if (mapInstance) {\n      mapInstance.fitBounds(bounds, { padding: 50 });\n    }\n  },\n\n  resetView: () => {\n    set({ viewState: DEFAULT_VIEW_STATE });\n    const { mapInstance } = get();\n    if (mapInstance) {\n      mapInstance.flyTo({\n        center: [DEFAULT_VIEW_STATE.longitude, DEFAULT_VIEW_STATE.latitude],\n        zoom: DEFAULT_VIEW_STATE.zoom,\n        bearing: DEFAULT_VIEW_STATE.bearing,\n        pitch: DEFAULT_VIEW_STATE.pitch,\n        essential: true,\n      });\n    }\n  },\n}));\n"],"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","ignoreList":[]}