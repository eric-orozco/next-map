525a92857a131a545a71ab9c3c89203d
"use strict";
// Mock i18next to return known values
jest.mock("react-i18next", ()=>({
        useTranslation: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _reacti18next = require("react-i18next");
require("../i18n");
const mockUseTranslation = _reacti18next.useTranslation;
describe("Internationalization", ()=>{
    beforeEach(()=>{
        const translations = {
            "common:welcome": "Welcome to Next Map",
            "navigation:home": "Home",
            "navigation:explore": "Explore",
            "auth:signIn": "Sign In",
            "map:title": "Map Title",
            "errors:generic": "An unexpected error occurred"
        };
        // Create a simple mock that returns the expected structure
        mockUseTranslation.mockReturnValue({
            t: jest.fn((key)=>translations[key] || key),
            i18n: {
                language: "en",
                changeLanguage: jest.fn().mockResolvedValue(undefined)
            },
            ready: true
        });
    });
    it("should provide translations for common namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("common"));
        expect(result.current.t("welcome")).toBe("Welcome to Next Map");
    });
    it("should provide translations for navigation namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("navigation"));
        expect(result.current.t("home")).toBe("Home");
        expect(result.current.t("explore")).toBe("Explore");
    });
    it("should provide translations for auth namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("auth"));
        expect(result.current.t("signIn")).toBe("Sign In");
    });
    it("should provide translations for map namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("map"));
        expect(result.current.t("title")).toBe("Map Title");
    });
    it("should provide translations for errors namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("errors"));
        expect(result.current.t("generic")).toBe("An unexpected error occurred");
    });
    it("should handle language switching", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)());
        expect(result.current.i18n.language).toBe("en");
        expect(result.current.i18n.changeLanguage).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWFvZmNoYW9zL1Byb2plY3RzL25leHQtbWFwL3NyYy9saWIvX190ZXN0c19fL2kxOG4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vayB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgXCJAL2xpYi9pMThuXCI7XG5cbi8vIE1vY2sgaTE4bmV4dCB0byByZXR1cm4ga25vd24gdmFsdWVzXG5qZXN0Lm1vY2soXCJyZWFjdC1pMThuZXh0XCIsICgpID0+ICh7XG4gIHVzZVRyYW5zbGF0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IG1vY2tVc2VUcmFuc2xhdGlvbiA9IHVzZVRyYW5zbGF0aW9uIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gIHR5cGVvZiB1c2VUcmFuc2xhdGlvblxuPjtcblxuZGVzY3JpYmUoXCJJbnRlcm5hdGlvbmFsaXphdGlvblwiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIFwiY29tbW9uOndlbGNvbWVcIjogXCJXZWxjb21lIHRvIE5leHQgTWFwXCIsXG4gICAgICBcIm5hdmlnYXRpb246aG9tZVwiOiBcIkhvbWVcIixcbiAgICAgIFwibmF2aWdhdGlvbjpleHBsb3JlXCI6IFwiRXhwbG9yZVwiLFxuICAgICAgXCJhdXRoOnNpZ25JblwiOiBcIlNpZ24gSW5cIixcbiAgICAgIFwibWFwOnRpdGxlXCI6IFwiTWFwIFRpdGxlXCIsXG4gICAgICBcImVycm9yczpnZW5lcmljXCI6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiLFxuICAgIH07XG5cbiAgICAvLyBDcmVhdGUgYSBzaW1wbGUgbW9jayB0aGF0IHJldHVybnMgdGhlIGV4cGVjdGVkIHN0cnVjdHVyZVxuICAgIG1vY2tVc2VUcmFuc2xhdGlvbi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgdDogamVzdC5mbigoa2V5OiBzdHJpbmcpID0+IHRyYW5zbGF0aW9uc1trZXldIHx8IGtleSksXG4gICAgICBpMThuOiB7XG4gICAgICAgIGxhbmd1YWdlOiBcImVuXCIsXG4gICAgICAgIGNoYW5nZUxhbmd1YWdlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICAgIH0sXG4gICAgICByZWFkeTogdHJ1ZSxcbiAgICB9IGFzIHVua25vd24gYXMgUmV0dXJuVHlwZTx0eXBlb2YgdXNlVHJhbnNsYXRpb24+KTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcHJvdmlkZSB0cmFuc2xhdGlvbnMgZm9yIGNvbW1vbiBuYW1lc3BhY2VcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVRyYW5zbGF0aW9uKFwiY29tbW9uXCIpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudChcIndlbGNvbWVcIikpLnRvQmUoXCJXZWxjb21lIHRvIE5leHQgTWFwXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIHRyYW5zbGF0aW9ucyBmb3IgbmF2aWdhdGlvbiBuYW1lc3BhY2VcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVRyYW5zbGF0aW9uKFwibmF2aWdhdGlvblwiKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnQoXCJob21lXCIpKS50b0JlKFwiSG9tZVwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudChcImV4cGxvcmVcIikpLnRvQmUoXCJFeHBsb3JlXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIHRyYW5zbGF0aW9ucyBmb3IgYXV0aCBuYW1lc3BhY2VcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVRyYW5zbGF0aW9uKFwiYXV0aFwiKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnQoXCJzaWduSW5cIikpLnRvQmUoXCJTaWduIEluXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIHRyYW5zbGF0aW9ucyBmb3IgbWFwIG5hbWVzcGFjZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVHJhbnNsYXRpb24oXCJtYXBcIikpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50KFwidGl0bGVcIikpLnRvQmUoXCJNYXAgVGl0bGVcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgdHJhbnNsYXRpb25zIGZvciBlcnJvcnMgbmFtZXNwYWNlXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VUcmFuc2xhdGlvbihcImVycm9yc1wiKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnQoXCJnZW5lcmljXCIpKS50b0JlKFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgaGFuZGxlIGxhbmd1YWdlIHN3aXRjaGluZ1wiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVHJhbnNsYXRpb24oKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmkxOG4ubGFuZ3VhZ2UpLnRvQmUoXCJlblwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaTE4bi5jaGFuZ2VMYW5ndWFnZSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInVzZVRyYW5zbGF0aW9uIiwiZm4iLCJtb2NrVXNlVHJhbnNsYXRpb24iLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ0cmFuc2xhdGlvbnMiLCJtb2NrUmV0dXJuVmFsdWUiLCJ0Iiwia2V5IiwiaTE4biIsImxhbmd1YWdlIiwiY2hhbmdlTGFuZ3VhZ2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsInJlYWR5IiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJIb29rIiwiZXhwZWN0IiwiY3VycmVudCIsInRvQmUiLCJ0b0JlRGVmaW5lZCJdLCJtYXBwaW5ncyI6IjtBQUlBLHNDQUFzQztBQUN0Q0EsS0FBS0MsSUFBSSxDQUFDLGlCQUFpQixJQUFPLENBQUE7UUFDaENDLGdCQUFnQkYsS0FBS0csRUFBRTtJQUN6QixDQUFBOzs7O3VCQVAyQjs4QkFDSTtRQUN4QjtBQU9QLE1BQU1DLHFCQUFxQkYsNEJBQWM7QUFJekNHLFNBQVMsd0JBQXdCO0lBQy9CQyxXQUFXO1FBQ1QsTUFBTUMsZUFBdUM7WUFDM0Msa0JBQWtCO1lBQ2xCLG1CQUFtQjtZQUNuQixzQkFBc0I7WUFDdEIsZUFBZTtZQUNmLGFBQWE7WUFDYixrQkFBa0I7UUFDcEI7UUFFQSwyREFBMkQ7UUFDM0RILG1CQUFtQkksZUFBZSxDQUFDO1lBQ2pDQyxHQUFHVCxLQUFLRyxFQUFFLENBQUMsQ0FBQ08sTUFBZ0JILFlBQVksQ0FBQ0csSUFBSSxJQUFJQTtZQUNqREMsTUFBTTtnQkFDSkMsVUFBVTtnQkFDVkMsZ0JBQWdCYixLQUFLRyxFQUFFLEdBQUdXLGlCQUFpQixDQUFDQztZQUM5QztZQUNBQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBQyxHQUFHLG9EQUFvRDtRQUNyRCxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1qQixJQUFBQSw0QkFBYyxFQUFDO1FBQ25Ea0IsT0FBT0YsT0FBT0csT0FBTyxDQUFDWixDQUFDLENBQUMsWUFBWWEsSUFBSSxDQUFDO0lBQzNDO0lBRUFMLEdBQUcsd0RBQXdEO1FBQ3pELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTWpCLElBQUFBLDRCQUFjLEVBQUM7UUFDbkRrQixPQUFPRixPQUFPRyxPQUFPLENBQUNaLENBQUMsQ0FBQyxTQUFTYSxJQUFJLENBQUM7UUFDdENGLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ1osQ0FBQyxDQUFDLFlBQVlhLElBQUksQ0FBQztJQUMzQztJQUVBTCxHQUFHLGtEQUFrRDtRQUNuRCxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1qQixJQUFBQSw0QkFBYyxFQUFDO1FBQ25Ea0IsT0FBT0YsT0FBT0csT0FBTyxDQUFDWixDQUFDLENBQUMsV0FBV2EsSUFBSSxDQUFDO0lBQzFDO0lBRUFMLEdBQUcsaURBQWlEO1FBQ2xELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTWpCLElBQUFBLDRCQUFjLEVBQUM7UUFDbkRrQixPQUFPRixPQUFPRyxPQUFPLENBQUNaLENBQUMsQ0FBQyxVQUFVYSxJQUFJLENBQUM7SUFDekM7SUFFQUwsR0FBRyxvREFBb0Q7UUFDckQsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNakIsSUFBQUEsNEJBQWMsRUFBQztRQUNuRGtCLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ1osQ0FBQyxDQUFDLFlBQVlhLElBQUksQ0FBQztJQUMzQztJQUVBTCxHQUFHLG9DQUFvQztRQUNyQyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1qQixJQUFBQSw0QkFBYztRQUNsRGtCLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ1YsSUFBSSxDQUFDQyxRQUFRLEVBQUVVLElBQUksQ0FBQztRQUMxQ0YsT0FBT0YsT0FBT0csT0FBTyxDQUFDVixJQUFJLENBQUNFLGNBQWMsRUFBRVUsV0FBVztJQUN4RDtBQUNGIn0=