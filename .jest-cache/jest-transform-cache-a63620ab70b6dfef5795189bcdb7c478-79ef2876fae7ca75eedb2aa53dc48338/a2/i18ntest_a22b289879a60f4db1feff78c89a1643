de5fb4f8eb0433b65881721ec511ea07
"use strict";
// Mock i18next to return known values
jest.mock("react-i18next", ()=>({
        useTranslation: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _reacti18next = require("react-i18next");
require("../i18n");
const mockUseTranslation = _reacti18next.useTranslation;
describe("Internationalization", ()=>{
    beforeEach(()=>{
        const translations = {
            "common:welcome": "Welcome to Next Map",
            "navigation:home": "Home",
            "navigation:explore": "Explore",
            "auth:signIn": "Sign In",
            "map:title": "Map Title",
            "errors:generic": "An unexpected error occurred"
        };
        // Mock useTranslation to handle namespaces properly
        mockUseTranslation.mockImplementation((namespace = 'common')=>({
                t: jest.fn((key)=>{
                    // If key doesn't contain namespace, prepend the current namespace
                    const fullKey = key.includes(':') ? key : `${namespace}:${key}`;
                    return translations[fullKey] || key;
                }),
                i18n: {
                    language: "en",
                    changeLanguage: jest.fn().mockResolvedValue(undefined)
                },
                ready: true
            }));
    });
    it("should provide translations for common namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("common"));
        expect(result.current.t("welcome")).toBe("Welcome to Next Map");
    });
    it("should provide translations for navigation namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("navigation"));
        expect(result.current.t("home")).toBe("Home");
        expect(result.current.t("explore")).toBe("Explore");
    });
    it("should provide translations for auth namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("auth"));
        expect(result.current.t("signIn")).toBe("Sign In");
    });
    it("should provide translations for map namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("map"));
        expect(result.current.t("title")).toBe("Map Title");
    });
    it("should provide translations for errors namespace", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)("errors"));
        expect(result.current.t("generic")).toBe("An unexpected error occurred");
    });
    it("should handle language switching", ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _reacti18next.useTranslation)());
        expect(result.current.i18n.language).toBe("en");
        expect(result.current.i18n.changeLanguage).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWFvZmNoYW9zL1Byb2plY3RzL25leHQtbWFwL3NyYy9saWIvX190ZXN0c19fL2kxOG4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vayB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgXCJAL2xpYi9pMThuXCI7XG5cbi8vIE1vY2sgaTE4bmV4dCB0byByZXR1cm4ga25vd24gdmFsdWVzXG5qZXN0Lm1vY2soXCJyZWFjdC1pMThuZXh0XCIsICgpID0+ICh7XG4gIHVzZVRyYW5zbGF0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IG1vY2tVc2VUcmFuc2xhdGlvbiA9IHVzZVRyYW5zbGF0aW9uIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gIHR5cGVvZiB1c2VUcmFuc2xhdGlvblxuPjtcblxuZGVzY3JpYmUoXCJJbnRlcm5hdGlvbmFsaXphdGlvblwiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIFwiY29tbW9uOndlbGNvbWVcIjogXCJXZWxjb21lIHRvIE5leHQgTWFwXCIsXG4gICAgICBcIm5hdmlnYXRpb246aG9tZVwiOiBcIkhvbWVcIixcbiAgICAgIFwibmF2aWdhdGlvbjpleHBsb3JlXCI6IFwiRXhwbG9yZVwiLFxuICAgICAgXCJhdXRoOnNpZ25JblwiOiBcIlNpZ24gSW5cIixcbiAgICAgIFwibWFwOnRpdGxlXCI6IFwiTWFwIFRpdGxlXCIsXG4gICAgICBcImVycm9yczpnZW5lcmljXCI6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiLFxuICAgIH07XG5cbiAgICAvLyBNb2NrIHVzZVRyYW5zbGF0aW9uIHRvIGhhbmRsZSBuYW1lc3BhY2VzIHByb3Blcmx5XG4gICAgbW9ja1VzZVRyYW5zbGF0aW9uLm1vY2tJbXBsZW1lbnRhdGlvbigobmFtZXNwYWNlID0gJ2NvbW1vbicpID0+ICh7XG4gICAgICB0OiBqZXN0LmZuKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAvLyBJZiBrZXkgZG9lc24ndCBjb250YWluIG5hbWVzcGFjZSwgcHJlcGVuZCB0aGUgY3VycmVudCBuYW1lc3BhY2VcbiAgICAgICAgY29uc3QgZnVsbEtleSA9IGtleS5pbmNsdWRlcygnOicpID8ga2V5IDogYCR7bmFtZXNwYWNlfToke2tleX1gO1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zW2Z1bGxLZXldIHx8IGtleTtcbiAgICAgIH0pLFxuICAgICAgaTE4bjoge1xuICAgICAgICBsYW5ndWFnZTogXCJlblwiLFxuICAgICAgICBjaGFuZ2VMYW5ndWFnZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgICB9LFxuICAgICAgcmVhZHk6IHRydWUsXG4gICAgfSBhcyB1bmtub3duIGFzIFJldHVyblR5cGU8dHlwZW9mIHVzZVRyYW5zbGF0aW9uPikpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIHRyYW5zbGF0aW9ucyBmb3IgY29tbW9uIG5hbWVzcGFjZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVHJhbnNsYXRpb24oXCJjb21tb25cIikpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50KFwid2VsY29tZVwiKSkudG9CZShcIldlbGNvbWUgdG8gTmV4dCBNYXBcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgdHJhbnNsYXRpb25zIGZvciBuYXZpZ2F0aW9uIG5hbWVzcGFjZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVHJhbnNsYXRpb24oXCJuYXZpZ2F0aW9uXCIpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudChcImhvbWVcIikpLnRvQmUoXCJIb21lXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50KFwiZXhwbG9yZVwiKSkudG9CZShcIkV4cGxvcmVcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgdHJhbnNsYXRpb25zIGZvciBhdXRoIG5hbWVzcGFjZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVHJhbnNsYXRpb24oXCJhdXRoXCIpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudChcInNpZ25JblwiKSkudG9CZShcIlNpZ24gSW5cIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgdHJhbnNsYXRpb25zIGZvciBtYXAgbmFtZXNwYWNlXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VUcmFuc2xhdGlvbihcIm1hcFwiKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnQoXCJ0aXRsZVwiKSkudG9CZShcIk1hcCBUaXRsZVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcHJvdmlkZSB0cmFuc2xhdGlvbnMgZm9yIGVycm9ycyBuYW1lc3BhY2VcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVRyYW5zbGF0aW9uKFwiZXJyb3JzXCIpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudChcImdlbmVyaWNcIikpLnRvQmUoXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBoYW5kbGUgbGFuZ3VhZ2Ugc3dpdGNoaW5nXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VUcmFuc2xhdGlvbigpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaTE4bi5sYW5ndWFnZSkudG9CZShcImVuXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pMThuLmNoYW5nZUxhbmd1YWdlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidXNlVHJhbnNsYXRpb24iLCJmbiIsIm1vY2tVc2VUcmFuc2xhdGlvbiIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInRyYW5zbGF0aW9ucyIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIm5hbWVzcGFjZSIsInQiLCJrZXkiLCJmdWxsS2V5IiwiaW5jbHVkZXMiLCJpMThuIiwibGFuZ3VhZ2UiLCJjaGFuZ2VMYW5ndWFnZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwicmVhZHkiLCJpdCIsInJlc3VsdCIsInJlbmRlckhvb2siLCJleHBlY3QiLCJjdXJyZW50IiwidG9CZSIsInRvQmVEZWZpbmVkIl0sIm1hcHBpbmdzIjoiO0FBSUEsc0NBQXNDO0FBQ3RDQSxLQUFLQyxJQUFJLENBQUMsaUJBQWlCLElBQU8sQ0FBQTtRQUNoQ0MsZ0JBQWdCRixLQUFLRyxFQUFFO0lBQ3pCLENBQUE7Ozs7dUJBUDJCOzhCQUNJO1FBQ3hCO0FBT1AsTUFBTUMscUJBQXFCRiw0QkFBYztBQUl6Q0csU0FBUyx3QkFBd0I7SUFDL0JDLFdBQVc7UUFDVCxNQUFNQyxlQUF1QztZQUMzQyxrQkFBa0I7WUFDbEIsbUJBQW1CO1lBQ25CLHNCQUFzQjtZQUN0QixlQUFlO1lBQ2YsYUFBYTtZQUNiLGtCQUFrQjtRQUNwQjtRQUVBLG9EQUFvRDtRQUNwREgsbUJBQW1CSSxrQkFBa0IsQ0FBQyxDQUFDQyxZQUFZLFFBQVEsR0FBTSxDQUFBO2dCQUMvREMsR0FBR1YsS0FBS0csRUFBRSxDQUFDLENBQUNRO29CQUNWLGtFQUFrRTtvQkFDbEUsTUFBTUMsVUFBVUQsSUFBSUUsUUFBUSxDQUFDLE9BQU9GLE1BQU0sR0FBR0YsVUFBVSxDQUFDLEVBQUVFLEtBQUs7b0JBQy9ELE9BQU9KLFlBQVksQ0FBQ0ssUUFBUSxJQUFJRDtnQkFDbEM7Z0JBQ0FHLE1BQU07b0JBQ0pDLFVBQVU7b0JBQ1ZDLGdCQUFnQmhCLEtBQUtHLEVBQUUsR0FBR2MsaUJBQWlCLENBQUNDO2dCQUM5QztnQkFDQUMsT0FBTztZQUNULENBQUE7SUFDRjtJQUVBQyxHQUFHLG9EQUFvRDtRQUNyRCxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1wQixJQUFBQSw0QkFBYyxFQUFDO1FBQ25EcUIsT0FBT0YsT0FBT0csT0FBTyxDQUFDZCxDQUFDLENBQUMsWUFBWWUsSUFBSSxDQUFDO0lBQzNDO0lBRUFMLEdBQUcsd0RBQXdEO1FBQ3pELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTXBCLElBQUFBLDRCQUFjLEVBQUM7UUFDbkRxQixPQUFPRixPQUFPRyxPQUFPLENBQUNkLENBQUMsQ0FBQyxTQUFTZSxJQUFJLENBQUM7UUFDdENGLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ2QsQ0FBQyxDQUFDLFlBQVllLElBQUksQ0FBQztJQUMzQztJQUVBTCxHQUFHLGtEQUFrRDtRQUNuRCxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1wQixJQUFBQSw0QkFBYyxFQUFDO1FBQ25EcUIsT0FBT0YsT0FBT0csT0FBTyxDQUFDZCxDQUFDLENBQUMsV0FBV2UsSUFBSSxDQUFDO0lBQzFDO0lBRUFMLEdBQUcsaURBQWlEO1FBQ2xELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTXBCLElBQUFBLDRCQUFjLEVBQUM7UUFDbkRxQixPQUFPRixPQUFPRyxPQUFPLENBQUNkLENBQUMsQ0FBQyxVQUFVZSxJQUFJLENBQUM7SUFDekM7SUFFQUwsR0FBRyxvREFBb0Q7UUFDckQsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNcEIsSUFBQUEsNEJBQWMsRUFBQztRQUNuRHFCLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ2QsQ0FBQyxDQUFDLFlBQVllLElBQUksQ0FBQztJQUMzQztJQUVBTCxHQUFHLG9DQUFvQztRQUNyQyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1wQixJQUFBQSw0QkFBYztRQUNsRHFCLE9BQU9GLE9BQU9HLE9BQU8sQ0FBQ1YsSUFBSSxDQUFDQyxRQUFRLEVBQUVVLElBQUksQ0FBQztRQUMxQ0YsT0FBT0YsT0FBT0csT0FBTyxDQUFDVixJQUFJLENBQUNFLGNBQWMsRUFBRVUsV0FBVztJQUN4RDtBQUNGIn0=