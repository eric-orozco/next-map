{"version":3,"sources":["/Users/seaofchaos/Projects/next-map/src/components/__tests__/Navigation.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport { ThemeProvider, createTheme } from '@mui/material';\nimport '@testing-library/jest-dom';\nimport Navigation from '@/components/Navigation';\n\n// Mock i18next\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\n// Mock the stores\njest.mock('@/stores/appStore', () => ({\n  useAppStore: jest.fn(() => ({\n    themeMode: 'light',\n    setThemeMode: jest.fn(),\n    toggleSidebar: jest.fn(),\n    language: 'en',\n    setLanguage: jest.fn(),\n  })),\n}));\n\nconst theme = createTheme();\n\nconst renderWithTheme = (component: React.ReactElement) => {\n  return render(<ThemeProvider theme={theme}>{component}</ThemeProvider>);\n};\n\ndescribe('Navigation Component', () => {\n  it('renders the navigation bar', () => {\n    renderWithTheme(<Navigation />);\n\n    expect(screen.getByText('Next Map')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /theme/i })).toBeInTheDocument();\n    expect(\n      screen.getByRole('button', { name: /language/i })\n    ).toBeInTheDocument();\n    expect(\n      screen.getByRole('button', { name: /account/i })\n    ).toBeInTheDocument();\n  });\n\n  it('displays explore, create, and dashboard buttons on desktop', () => {\n    renderWithTheme(<Navigation />);\n\n    // These buttons should be visible on desktop\n    expect(screen.getByText('explore')).toBeInTheDocument();\n    expect(screen.getByText('create')).toBeInTheDocument();\n    expect(screen.getByText('dashboard')).toBeInTheDocument();\n  });\n\n  it('has proper accessibility attributes', () => {\n    renderWithTheme(<Navigation />);\n\n    const themeButton = screen.getByRole('button', { name: /theme/i });\n    const langButton = screen.getByRole('button', { name: /language/i });\n    const accountButton = screen.getByRole('button', { name: /account/i });\n\n    expect(themeButton).toHaveAttribute('aria-label', 'theme');\n    expect(langButton).toHaveAttribute('aria-label', 'language');\n    expect(accountButton).toHaveAttribute('aria-label', 'account');\n  });\n});\n"],"names":["jest","mock","useTranslation","t","key","useAppStore","fn","themeMode","setThemeMode","toggleSidebar","language","setLanguage","theme","createTheme","renderWithTheme","component","render","ThemeProvider","describe","it","Navigation","expect","screen","getByText","toBeInTheDocument","getByRole","name","themeButton","langButton","accountButton","toHaveAttribute"],"mappings":";AAKA,eAAe;AACfA,KAAKC,IAAI,CAAC,iBAAiB,IAAO,CAAA;QAChCC,gBAAgB,IAAO,CAAA;gBACrBC,GAAG,CAACC,MAAgBA;YACtB,CAAA;IACF,CAAA;AAEA,kBAAkB;AAClBJ,KAAKC,IAAI,CAAC,qBAAqB,IAAO,CAAA;QACpCI,aAAaL,KAAKM,EAAE,CAAC,IAAO,CAAA;gBAC1BC,WAAW;gBACXC,cAAcR,KAAKM,EAAE;gBACrBG,eAAeT,KAAKM,EAAE;gBACtBI,UAAU;gBACVC,aAAaX,KAAKM,EAAE;YACtB,CAAA;IACF,CAAA;;;;;uBArB+B;0BACY;QACpC;mEACgB;;;;;;AAoBvB,MAAMM,QAAQC,IAAAA,qBAAW;AAEzB,MAAMC,kBAAkB,CAACC;IACvB,OAAOC,IAAAA,aAAM,gBAAC,qBAACC,uBAAa;QAACL,OAAOA;kBAAQG;;AAC9C;AAEAG,SAAS,wBAAwB;IAC/BC,GAAG,8BAA8B;QAC/BL,8BAAgB,qBAACM,mBAAU;QAE3BC,OAAOC,aAAM,CAACC,SAAS,CAAC,aAAaC,iBAAiB;QACtDH,OAAOC,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAS,IAAIF,iBAAiB;QACxEH,OACEC,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAY,IAC/CF,iBAAiB;QACnBH,OACEC,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAW,IAC9CF,iBAAiB;IACrB;IAEAL,GAAG,8DAA8D;QAC/DL,8BAAgB,qBAACM,mBAAU;QAE3B,6CAA6C;QAC7CC,OAAOC,aAAM,CAACC,SAAS,CAAC,YAAYC,iBAAiB;QACrDH,OAAOC,aAAM,CAACC,SAAS,CAAC,WAAWC,iBAAiB;QACpDH,OAAOC,aAAM,CAACC,SAAS,CAAC,cAAcC,iBAAiB;IACzD;IAEAL,GAAG,uCAAuC;QACxCL,8BAAgB,qBAACM,mBAAU;QAE3B,MAAMO,cAAcL,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAS;QAChE,MAAME,aAAaN,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAY;QAClE,MAAMG,gBAAgBP,aAAM,CAACG,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAW;QAEpEL,OAAOM,aAAaG,eAAe,CAAC,cAAc;QAClDT,OAAOO,YAAYE,eAAe,CAAC,cAAc;QACjDT,OAAOQ,eAAeC,eAAe,CAAC,cAAc;IACtD;AACF"}